{
  "version": 3,
  "sources": ["../../../../../apps/gps_integration/gps_integration/public/js/location_tracker.js"],
  "sourcesContent": ["// gps_integration/public/js/location_tracker.js\n\nfrappe.provide('gps_integration');\n\ngps_integration.LocationTracker = class LocationTracker {\n    constructor() {\n        this.activeVehicles = new Map();\n        this.watchId = null;\n        this.tracking = false;\n        this.setupTrackingIndicator();\n        this.startTracking();\n    }\n\n    static getInstance() {\n        if (!gps_integration.LocationTracker.instance) {\n            gps_integration.LocationTracker.instance = new gps_integration.LocationTracker();\n        }\n        return gps_integration.LocationTracker.instance;\n    }\n\n    setupTrackingIndicator() {\n        if (!document.getElementById('tracking-status')) {\n            const indicator = document.createElement('div');\n            indicator.id = 'tracking-status';\n            indicator.style.position = 'fixed';\n            indicator.style.bottom = '20px';\n            indicator.style.right = '20px';\n            indicator.style.padding = '10px';\n            indicator.style.borderRadius = '5px';\n            indicator.style.display = 'none';\n            indicator.style.zIndex = 1000;\n            document.body.appendChild(indicator);\n        }\n    }\n\n    startTracking() {\n        if (!this.tracking && navigator.geolocation) {\n            this.tracking = true;\n            this.refreshActiveVehicles();\n            \n            // Refresh active vehicles every minute\n            setInterval(() => this.refreshActiveVehicles(), 60000);\n            \n            this.watchId = navigator.geolocation.watchPosition(\n                (position) => this.handlePositionUpdate(position),\n                (error) => this.handleError(error),\n                {\n                    enableHighAccuracy: true,\n                    maximumAge: 30000,\n                    timeout: 27000\n                }\n            );\n        }\n    }\n\n    refreshActiveVehicles() {\n        frappe.call({\n            method: 'gps_integration.api.get_active_vehicles',\n            callback: (r) => {\n                if (r.message) {\n                    this.updateActiveVehicles(r.message);\n                }\n            }\n        });\n    }\n\n    updateActiveVehicles(vehicles) {\n        this.activeVehicles.clear();\n        vehicles.forEach(vehicle => {\n            this.activeVehicles.set(vehicle, true);\n        });\n        this.updateIndicator();\n    }\n\n    updateIndicator() {\n        const indicator = document.getElementById('tracking-status');\n        const count = this.activeVehicles.size;\n        \n        if (count > 0) {\n            indicator.style.display = 'block';\n            indicator.style.backgroundColor = '#4CAF50';\n            indicator.textContent = `Tracking ${count} vehicle(s)`;\n        } else {\n            indicator.style.display = 'none';\n        }\n    }\n\n    handlePositionUpdate(position) {\n        if (this.activeVehicles.size === 0) return;\n\n        const currentLat = position.coords.latitude;\n        const currentLon = position.coords.longitude;\n        const accuracy = position.coords.accuracy;\n        const speed = position.coords.speed ? position.coords.speed : 0;\n\n        frappe.call({\n            method: 'gps_integration.api.check_delivery_locations',\n            args: {\n                vehicles: Array.from(this.activeVehicles.keys()),\n                current_lat: currentLat,\n                current_lon: currentLon,\n                accuracy: accuracy,\n                speed: speed\n            },\n            callback: (r) => {\n                if (r.message) {\n                    this.updateTrackingStatus(r.message);\n                    // Send desktop notifications\n                    r.message.forEach(update => {\n                        if (update.status === 'Reached' || update.status === 'Moving Away') {\n                            this.sendDesktopNotification(update);\n                        }\n                    });\n                }\n            }\n        });\n    }\n\n    updateTrackingStatus(updates) {\n        updates.forEach(update => {\n            let statusColor = 'blue';\n            let message = '';\n\n            switch(update.status) {\n                case 'Reached':\n                    statusColor = 'green';\n                    message = `${update.vehicle}: Reached ${update.customer}`;\n                    frappe.utils.play_sound('alert');\n                    break;\n                case 'Moving Away':\n                    statusColor = 'orange';\n                    message = `${update.vehicle}: Moving away from ${update.customer} (${Math.round(update.distance)}m)`;\n                    break;\n                case 'Stationary':\n                    statusColor = 'yellow';\n                    message = `${update.vehicle}: Stopped near ${update.customer} (${Math.round(update.distance)}m)`;\n                    break;\n                case 'Moving':\n                    statusColor = 'blue';\n                    message = `${update.vehicle}: Moving at ${Math.round(update.speed * 3.6)}km/h`; // Convert m/s to km/h\n                    break;\n            }\n\n            frappe.show_alert({\n                message: message,\n                indicator: statusColor\n            }, 7);\n\n            // Update the tracking indicator with more details\n            this.updateDetailedIndicator(updates);\n        });\n    }\n\n    updateDetailedIndicator(updates) {\n        const indicator = document.getElementById('tracking-status');\n        if (!indicator) return;\n\n        let html = `<div style=\"font-weight: bold;\">Tracking ${this.activeVehicles.size} vehicle(s)</div>`;\n        \n        updates.forEach(update => {\n            let statusColor = update.status === 'Reached' ? 'green' : \n                             update.status === 'Moving Away' ? 'orange' :\n                             update.status === 'Stationary' ? 'yellow' : 'blue';\n            \n            html += `\n                <div style=\"margin-top: 5px; padding: 5px; border-left: 3px solid ${statusColor};\">\n                    <div>${update.vehicle}</div>\n                    <div style=\"font-size: 0.9em; color: #666;\">\n                        ${update.status}\n                        ${update.distance ? ` - ${Math.round(update.distance)}m` : ''}\n                        ${update.speed ? ` - ${Math.round(update.speed * 3.6)}km/h` : ''}\n                    </div>\n                </div>\n            `;\n        });\n\n        indicator.innerHTML = html;\n        indicator.style.display = 'block';\n        indicator.style.backgroundColor = '#fff';\n        indicator.style.border = '1px solid #ddd';\n        indicator.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';\n        indicator.style.padding = '15px';\n        indicator.style.maxWidth = '300px';\n    }\n\n    handleError(error) {\n        frappe.show_alert({\n            message: `Geolocation error: ${error.message}`,\n            indicator: 'red'\n        });\n    }\n\n    sendDesktopNotification(update) {\n        if (!(\"Notification\" in window)) {\n            return;\n        }\n\n        // Request permission if not granted\n        if (Notification.permission !== \"granted\") {\n            Notification.requestPermission();\n            return;\n        }\n\n        let title = '';\n        let options = {\n            icon: '/assets/gps_integration/images/truck.png', // Add an icon image to your app\n            body: '',\n            tag: update.vehicle // Prevent duplicate notifications for same vehicle\n        };\n\n        if (update.status === 'Reached') {\n            title = `Vehicle Reached Destination`;\n            options.body = `${update.vehicle} has reached ${update.customer}`;\n        } else if (update.status === 'Moving Away') {\n            title = `Vehicle Moving Away`;\n            options.body = `${update.vehicle} is moving away from ${update.customer} (${Math.round(update.distance)}m)`;\n        }\n\n        const notification = new Notification(title, options);\n        \n        // Play sound for important notifications\n        if (update.status === 'Reached') {\n            frappe.utils.play_sound('alert');\n        }\n\n        // Also show in-app notification\n        frappe.show_alert({\n            message: options.body,\n            indicator: update.status === 'Reached' ? 'green' : 'orange'\n        }, 15);\n\n        // Create a notification log in ERPNext\n        frappe.call({\n            method: 'gps_integration.api.create_notification_log',\n            args: {\n                subject: title,\n                message: options.body,\n                vehicle: update.vehicle,\n                for_user: frappe.session.user\n            }\n        });\n    }\n}\n\n// Initialize tracker when the page loads\n$(document).ready(function() {\n    gps_integration.tracker = gps_integration.LocationTracker.getInstance();\n});"],
  "mappings": "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",
  "names": []
}
